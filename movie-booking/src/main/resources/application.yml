spring:
  profiles:
    active: ${ACTIVE_PROFILE:dev}

  datasource:
    url: jdbc:postgresql://${POSTGRES_SQL_HOST}:${POSTGRES_SQL_PORT}/${POSTGRES_SQL_DB}
    username: ${POSTGRES_SQL_USERNAME}
    password: ${POSTGRES_SQL_PASSWORD}
  jpa:
    generate-ddl: true
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
        globally_quoted_identifiers: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    defer-datasource-initialization: true
  sql:
    init:
      mode: always
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
  security:
    oauth2:
        client:
          registration:
            google: 
              client-id: 19074656725-hpb36tjda8ice7d2jm35vq00nsk9rffo.apps.googleusercontent.com
              client-secret: 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
              redirect_uri: http://localhost:8080/login/oauth2/code/google
              # scope: openid,profile,email
          provider:
            google:
              authorization-uri: https://accounts.google.com/o/oauth2/auth
              token-uri: https://oauth2.googleapis.com/token
              user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
              user-name-attribute: sub
server:
  port: ${SERVER_PORT:8080}


jwt:
  secret: ${JWT_TOKEN_SECRET}
  access:
    duration:
      minute: ${JWT_ACCESS_TOKEN_DURATION_MINUTE}
      second: ${JWT_ACCESS_TOKEN_DURATION_SECOND}
    cookie-name: ${JWT_ACCESS_COOKIE_NAME}
  refresh:
    duration:
      day: ${JWT_REFRESH_TOKEN_DURATION_DAY}
      second: ${JWT_REFRESH_TOKEN_DURATION_SECOND}
    cookie-name: ${JWT_REFRESH_COOKIE_NAME}

logging:
  level:
    org.springframework.security: DEBUG
